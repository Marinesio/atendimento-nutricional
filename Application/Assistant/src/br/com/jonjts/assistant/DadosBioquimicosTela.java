/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.jonjts.assistant;

import br.com.jonjts.assistant.control.ExamesBioquimicosExtrasControl;
import br.com.jonjts.assistant.entity.DadosBioquimicos;
import br.com.jonjts.assistant.entity.ExameClinico;
import br.com.jonjts.assistant.entity.ExamesBioquimicosExtras;
import br.com.jonjts.assistant.entity.Paciente;
import java.awt.Color;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jonas
 */
public class DadosBioquimicosTela extends javax.swing.JFrame implements ITab {

    private NovoPaciente novoPaciente;
    private DadosBioquimicos dadosBioquimicos;
    private ExamesBioquimicosExtrasControl examesBioquimicosExtrasControl = new ExamesBioquimicosExtrasControl();
    private List<ExamesBioquimicosExtras> bioquimicosExtras = new ArrayList<ExamesBioquimicosExtras>();
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

    public DadosBioquimicosTela(NovoPaciente novoPaciente) {
        this.novoPaciente = novoPaciente;
        initComponents();
        fieldsDadosBioquimicos.setPaciente(novoPaciente.getPaciente());
        setOnUpdateGrid();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbExtras = new javax.swing.JTable();
        jLabel43 = new javax.swing.JLabel();
        btnAddTable = new javax.swing.JToggleButton();
        btnRemoveTable = new javax.swing.JToggleButton();
        fieldsDadosBioquimicos = new br.com.jonjts.assistant.FieldsDadosBioquimicos();
        btnComparar = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbExtras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Resultado", "Referencia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbExtras);

        jLabel43.setText("Extras:");

        btnAddTable.setText("+");
        btnAddTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTableActionPerformed(evt);
            }
        });

        btnRemoveTable.setText("-");
        btnRemoveTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveTableActionPerformed(evt);
            }
        });

        btnComparar.setText("Comparar dados");
        btnComparar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompararActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnComparar)
                    .addComponent(fieldsDadosBioquimicos, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel43)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddTable)
                    .addComponent(btnRemoveTable, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(btnAddTable)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemoveTable))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnComparar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldsDadosBioquimicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTableActionPerformed
        getTableModelExtras().addRow(new Object[]{});
        bioquimicosExtras.add(new ExamesBioquimicosExtras());
    }//GEN-LAST:event_btnAddTableActionPerformed

    private void btnRemoveTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveTableActionPerformed
        int selectedRow = tbExtras.getSelectedRow();
        if (selectedRow >= 0) {
            getTableModelExtras().removeRow(selectedRow);
            bioquimicosExtras.remove(selectedRow);
        }
    }//GEN-LAST:event_btnRemoveTableActionPerformed

    private void btnCompararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompararActionPerformed
        CompararDadosBioquimicos compararDadosBioquimicos = new CompararDadosBioquimicos();
        compararDadosBioquimicos.setPaciente(novoPaciente.getPaciente());
        compararDadosBioquimicos.loadcbExames();
        compararDadosBioquimicos.setVisible(true);
    }//GEN-LAST:event_btnCompararActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnAddTable;
    private javax.swing.JToggleButton btnComparar;
    private javax.swing.JToggleButton btnRemoveTable;
    private transient br.com.jonjts.assistant.FieldsDadosBioquimicos fieldsDadosBioquimicos;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbExtras;
    // End of variables declaration//GEN-END:variables

    private DefaultTableModel getTableModelExtras() {
        return (DefaultTableModel) tbExtras.getModel();
    }

    @Override
    public void save() {
        if (dadosBioquimicos == null) {
            insert();
        } else {
            update();
        }
    }

    private void update() {
        try {
            bindDadosQuimicos();
            novoPaciente.updateDadosBioquimicos(dadosBioquimicos, bioquimicosExtras);
            JOptionPane.showMessageDialog(null, "Salvo");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar dados bioquímicos");
            Logger.getLogger(DadosBioquimicosTela.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void insert() {
        try {
            dadosBioquimicos = new DadosBioquimicos();
            bindDadosQuimicos();
            dadosBioquimicos = novoPaciente.insertDadosBioquimicos(dadosBioquimicos, bioquimicosExtras);
            JOptionPane.showMessageDialog(null, "Salvo");
        } catch (Exception ex) {
            dadosBioquimicos = null;
            JOptionPane.showMessageDialog(null, "Erro ao salvar dados bioquímicos");
            Logger.getLogger(DadosBioquimicosTela.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void clearData() {
        fieldsDadosBioquimicos.clearData();
        clearGrid();
    }

    private void clearGrid() {
        DefaultTableModel model = getTableModelExtras();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
    }

    @Override
    public void loadData() {
        fieldsDadosBioquimicos.loadData(dadosBioquimicos);
        loadGrid();
    }

    private void bindDadosQuimicos() {
        DadosBioquimicos dbq = fieldsDadosBioquimicos.getDadosBioquimicos();
        Long id = dadosBioquimicos.getId();
        Long idPaciente = dadosBioquimicos.getIdPaciente();
        Long idExameClinico = dadosBioquimicos.getIdExameClinico();
        dadosBioquimicos = dbq;
        dadosBioquimicos.setId(id);
        dadosBioquimicos.setIdExameClinico(idExameClinico);
        dadosBioquimicos.setIdPaciente(idPaciente);

    }

    private void loadGrid() {
        final Long idExameClinico = dadosBioquimicos.getIdExameClinico();
        try {
            bioquimicosExtras = examesBioquimicosExtrasControl.get(idExameClinico.longValue());
            DefaultTableModel tableModelExtras = getTableModelExtras();
            clearGrid();
            for (ExamesBioquimicosExtras extras : bioquimicosExtras) {
                tableModelExtras.addRow(new Object[]{extras.getNome(), extras.getResultado(), extras.getReferencia()});
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar exames bioquimicos extras.");
            Logger.getLogger(DadosBioquimicosTela.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setOnUpdateGrid() {
        getTableModelExtras().addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == e.UPDATE) {
                    final int row = e.getFirstRow();
                    DefaultTableModel tableModelExtras = getTableModelExtras();

                    String nome = (String) tableModelExtras.getValueAt(row, 0);
                    String resultado = (String) tableModelExtras.getValueAt(row, 1);
                    String referencia = (String) tableModelExtras.getValueAt(row, 2);

                    ExamesBioquimicosExtras get = bioquimicosExtras.get(row);
                    get.setId(null);
                    get.setNome(nome);
                    get.setReferencia(referencia);
                    get.setResultado(resultado);
                }
            }
        });
    }

    public List<ExamesBioquimicosExtras> bindGrid(Paciente paciente, ExameClinico exameClinico, List<ExamesBioquimicosExtras> list) {
        for (ExamesBioquimicosExtras extras : list) {
            extras.setPaciente(paciente);
            extras.setExameClinico(exameClinico);
        }
        return list;
    }

    public void setDadosBioquimicos(DadosBioquimicos get) {
        dadosBioquimicos = get;
    }

}
