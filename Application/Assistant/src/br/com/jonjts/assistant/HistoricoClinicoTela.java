/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.jonjts.assistant;

import br.com.jonjts.assistant.dto.Exercicio;
import br.com.jonjts.assistant.dto.HistoricoClinico;
import br.com.jonjts.assistant.dto.MedicamentoDomiliciar;
import br.com.jonjts.assistant.dto.Paciente;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Jonas
 */
public class HistoricoClinicoTela extends javax.swing.JFrame implements ITab {

    private NovoPaciente novoPaciente;
    private HistoricoClinico historicoClinico;
    private final Paciente paciente;

    public HistoricoClinicoTela(NovoPaciente novoPaciente) {
        this.novoPaciente = novoPaciente;
        paciente = novoPaciente.getPaciente();
        initComponents();
        disableAll();
        enableUpdateExercicios();
        enableUpdateMedicamentos();
    }

    private void enableUpdateMedicamentos() {
        getTableMedicamentosModel().addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == e.UPDATE) {
                    try {
                        final int row = e.getFirstRow();
                        final DefaultTableModel tableMedicamentosModel = getTableMedicamentosModel();

                        String nome = (String) tableMedicamentosModel.getValueAt(row, 0);
                        String frequencia = (String) tableMedicamentosModel.getValueAt(row, 1);

                        MedicamentoDomiliciar medicamento = getMedicamento(row);
                        medicamento.setFrequencia(frequencia);
                        medicamento.setNome(nome);

                        paciente.getMedicamentos().update(medicamento);
                    } catch (SQLException ex) {
                        Logger.getLogger(HistoricoClinicoTela.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }
        });
    }

    private void enableUpdateExercicios() {
        getTableExercicioModel().addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == e.UPDATE) {
                    try {
                        final int row = e.getFirstRow();
                        final DefaultTableModel tableExercicioModel = getTableExercicioModel();

                        String tipo = (String) tableExercicioModel.getValueAt(row, 0);
                        String frequencia = (String) tableExercicioModel.getValueAt(row, 1);
                        String duracao = (String) tableExercicioModel.getValueAt(row, 2);

                        Exercicio exercicio = getExercicio(row);
                        exercicio.setDuracao(duracao);
                        exercicio.setFrequencia(frequencia);
                        exercicio.setTipo(tipo);

                        paciente.getExercicios().update(exercicio);
                    } catch (SQLException ex) {
                        Logger.getLogger(HistoricoClinicoTela.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }
        });
    }

    private void disableAll() {
        disableEtilismo();
        disableTabagismo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDoencaAtual = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAtencedentesPatologicos = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtAtencedentesFamilares = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        cbEtilismo = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        txtTempoEtilismo = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtFrequenciaEtilismo = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        cbTabagismo = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        txtTempoTabagismo = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtFrequenciaTabagismo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbExercicio = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnAddExercicio = new javax.swing.JToggleButton();
        btnRemoveExercicio = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbMedicamentos = new javax.swing.JTable();
        btnAddMed = new javax.swing.JToggleButton();
        btnRemoveMed = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel8.setText("Historia da Doença Atual:");

        txtDoencaAtual.setColumns(20);
        txtDoencaAtual.setRows(5);
        jScrollPane2.setViewportView(txtDoencaAtual);

        jLabel9.setText("Atencedentes Patológicos:");

        txtAtencedentesPatologicos.setColumns(20);
        txtAtencedentesPatologicos.setRows(5);
        jScrollPane3.setViewportView(txtAtencedentesPatologicos);

        jLabel10.setText("Atencedentes Familiares:");

        txtAtencedentesFamilares.setColumns(20);
        txtAtencedentesFamilares.setRows(5);
        jScrollPane4.setViewportView(txtAtencedentesFamilares);

        jLabel11.setText("Etílismo:");

        cbEtilismo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sim", "Não" }));
        cbEtilismo.setSelectedIndex(1);
        cbEtilismo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEtilismoActionPerformed(evt);
            }
        });

        jLabel12.setText("Tempo:");

        jLabel13.setText("Frequência:");

        jLabel14.setText("Tabagismo:");

        cbTabagismo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sim", "Não" }));
        cbTabagismo.setSelectedIndex(1);
        cbTabagismo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTabagismoActionPerformed(evt);
            }
        });

        jLabel15.setText("Tempo:");

        jLabel16.setText("Frequência:");

        tbExercicio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Frequência", "Duração"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbExercicio.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbExercicio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tbExercicioKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(tbExercicio);

        jLabel1.setText("Exercícios:");

        btnAddExercicio.setText("+");
        btnAddExercicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddExercicioActionPerformed(evt);
            }
        });

        btnRemoveExercicio.setText("-");
        btnRemoveExercicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveExercicioActionPerformed(evt);
            }
        });

        jLabel2.setText("Medicamentos de Uso Domiciliar:");

        tbMedicamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Frequência"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbMedicamentos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(tbMedicamentos);

        btnAddMed.setText("+");
        btnAddMed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMedActionPerformed(evt);
            }
        });

        btnRemoveMed.setText("-");
        btnRemoveMed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveMedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(208, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbEtilismo, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTempoEtilismo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFrequenciaEtilismo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbTabagismo, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTempoTabagismo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFrequenciaTabagismo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(166, 166, 166))
            .addGroup(layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3))))
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAddExercicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnRemoveExercicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAddMed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnRemoveMed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddExercicio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemoveExercicio)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddMed)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemoveMed)))))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cbEtilismo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(txtTempoEtilismo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(txtFrequenciaEtilismo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(cbTabagismo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(txtTempoTabagismo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(txtFrequenciaTabagismo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(77, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void disableEtilismo() {
        txtTempoEtilismo.setEnabled(false);
        txtFrequenciaEtilismo.setEnabled(false);
    }

    private void enableEtilismo() {
        txtTempoEtilismo.setEnabled(true);
        txtFrequenciaEtilismo.setEnabled(true);
    }

    private void enableTabagismo() {
        txtTempoTabagismo.setEnabled(true);
        txtFrequenciaTabagismo.setEnabled(true);
    }

    private void disableTabagismo() {
        txtTempoTabagismo.setEnabled(false);
        txtFrequenciaTabagismo.setEnabled(false);
    }


    private void cbEtilismoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEtilismoActionPerformed
        if (cbEtilismo.getSelectedItem() == cbEtilismo.getItemAt(1)) {
            disableEtilismo();
        } else {
            enableEtilismo();
        }
    }//GEN-LAST:event_cbEtilismoActionPerformed

    private void cbTabagismoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTabagismoActionPerformed
        if (cbTabagismo.getSelectedItem() == cbTabagismo.getItemAt(1)) {
            disableTabagismo();
        } else {
            enableTabagismo();
        }
    }//GEN-LAST:event_cbTabagismoActionPerformed

    private void btnAddExercicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddExercicioActionPerformed
        getTableExercicioModel().addRow(new Object[]{});
        Exercicio exercicio = new Exercicio();
        exercicio.setPaciente(paciente);
        paciente.getExercicios().add(exercicio);
    }//GEN-LAST:event_btnAddExercicioActionPerformed

    private void btnAddMedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMedActionPerformed
        paciente.getMedicamentos().add(new MedicamentoDomiliciar());
        getTableMedicamentosModel().addRow(new Object[]{});
    }//GEN-LAST:event_btnAddMedActionPerformed

    private void btnRemoveMedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveMedActionPerformed
        int selectedRow = tbMedicamentos.getSelectedRow();
        if (selectedRow >= 0) {
            MedicamentoDomiliciar medicamento = (MedicamentoDomiliciar) getMedicamento(selectedRow);
            boolean remove = paciente.getMedicamentos().remove(medicamento);
            if (remove) {
                getTableMedicamentosModel().removeRow(selectedRow);
            }
        }
    }//GEN-LAST:event_btnRemoveMedActionPerformed

    private void btnRemoveExercicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveExercicioActionPerformed
        int selectedRow = tbExercicio.getSelectedRow();
        if (selectedRow >= 0) {
            Exercicio ex = (Exercicio) getExercicio(selectedRow);
            boolean remove = paciente.getExercicios().remove(ex);
            if (remove) {
                getTableExercicioModel().removeRow(selectedRow);
            }
        }
    }//GEN-LAST:event_btnRemoveExercicioActionPerformed

    private void tbExercicioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbExercicioKeyTyped
        System.out.println("KKK");
    }//GEN-LAST:event_tbExercicioKeyTyped

    private DefaultTableModel getTableMedicamentosModel() {
        return (DefaultTableModel) tbMedicamentos.getModel();
    }

    private DefaultTableModel getTableExercicioModel() {
        return (DefaultTableModel) tbExercicio.getModel();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnAddExercicio;
    private javax.swing.JToggleButton btnAddMed;
    private javax.swing.JButton btnRemoveExercicio;
    private javax.swing.JButton btnRemoveMed;
    private javax.swing.JComboBox cbEtilismo;
    private javax.swing.JComboBox cbTabagismo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tbExercicio;
    private javax.swing.JTable tbMedicamentos;
    private javax.swing.JTextArea txtAtencedentesFamilares;
    private javax.swing.JTextArea txtAtencedentesPatologicos;
    private javax.swing.JTextArea txtDoencaAtual;
    private javax.swing.JTextField txtFrequenciaEtilismo;
    private javax.swing.JTextField txtFrequenciaTabagismo;
    private javax.swing.JTextField txtTempoEtilismo;
    private javax.swing.JTextField txtTempoTabagismo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void save() {
        if (historicoClinico == null) {
            insertHistoricoClinco();
        } else {
            updateHistoricoClinico();
        }
    }

    @Override
    public void clearData() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void updateHistoricoClinico() {
        try {
            preencherHistoricoClinico();
            novoPaciente.updateHistoricoClinico(historicoClinico);
            JOptionPane.showMessageDialog(null, "Salvo");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar Historico Clinico");
        }
    }

    private void insertHistoricoClinco() {
        try {
            historicoClinico = new HistoricoClinico();
            preencherHistoricoClinico();
            historicoClinico = novoPaciente.insertHistoricoClinico(historicoClinico);
            JOptionPane.showMessageDialog(null, "Salvo");
        } catch (Exception ex) {
            historicoClinico = null;
            JOptionPane.showMessageDialog(null, "Erro ao salvar Historico Clinico");
            ex.printStackTrace();
        }
    }

    @Override
    public void loadData() {
        try {
            if (historicoClinico != null) {
                String atencedentesFamiliares = historicoClinico.getAtencedentesFamiliares();
                txtAtencedentesFamilares.setText(atencedentesFamiliares == null ? "" : atencedentesFamiliares);

                String atencedentesPatologicos = historicoClinico.getAtencedentesPatologicos();
                txtAtencedentesPatologicos.setText(atencedentesPatologicos == null ? "" : atencedentesPatologicos);

                String doencaAtual = historicoClinico.getDoencaAtual();
                txtDoencaAtual.setText(doencaAtual == null ? "" : doencaAtual);

                try {
                    if (historicoClinico.getEtilismo().equals("Sim")) {
                        enableEtilismo();
                        cbEtilismo.setSelectedIndex(0);
                        txtTempoEtilismo.setText(historicoClinico.getTempoEtilismo());
                        txtFrequenciaEtilismo.setText(historicoClinico.getFrequenciaEtilismo());
                    }
                } catch (Exception e) {
                }
                try {
                    if (historicoClinico.getTabagismo().equals("Sim")) {
                        enableTabagismo();
                        cbTabagismo.setSelectedIndex(0);
                        txtTempoTabagismo.setText(historicoClinico.getTempoTabagismo());
                        txtFrequenciaTabagismo.setText(historicoClinico.getFrequenciaTabagismo());
                    }
                } catch (Exception e) {
                }

            }
            loadTabelas();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar historico clinico");
        }
    }

    private void loadTabelas() throws Exception {
        loadTabelaMedicamentos();
        loadTabelaExercicio();
    }

    private void loadTabelaExercicio() {
        DefaultTableModel model = getTableExercicioModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        if (paciente.getExercicios() != null) {
            for (Exercicio e : paciente.getExercicios()) {
                model.addRow(new Object[]{e.getTipo(), e.getFrequencia(), e.getDuracao()});
            }
        }
    }

    private void loadTabelaMedicamentos() {
        DefaultTableModel model = (DefaultTableModel) tbMedicamentos.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        if (paciente.getMedicamentos() != null) {
            for (MedicamentoDomiliciar md : paciente.getMedicamentos()) {
                model.addRow(new Object[]{md.getNome(), md.getFrequencia()});
            }
        }
    }

    private void preencherHistoricoClinico() {
        historicoClinico.setAtencedentesFamiliares(txtAtencedentesFamilares.getText());
        historicoClinico.setAtencedentesPatologicos(txtAtencedentesPatologicos.getText());
        historicoClinico.setDoencaAtual(txtDoencaAtual.getText());

        historicoClinico.setEtilismo((String) cbEtilismo.getSelectedItem());
        historicoClinico.setTempoEtilismo(txtTempoEtilismo.getText());
        historicoClinico.setFrequenciaEtilismo(txtFrequenciaEtilismo.getText());

        historicoClinico.setTabagismo((String) cbTabagismo.getSelectedItem());
        historicoClinico.setTempoTabagismo(txtTempoTabagismo.getText());
        historicoClinico.setFrequenciaTabagismo(txtFrequenciaTabagismo.getText());
    }

    public void setHistoricoClinico(HistoricoClinico historicoClinico) {
        this.historicoClinico = historicoClinico;
    }

    private MedicamentoDomiliciar getMedicamento(int indice) {
        Object[] toArray = paciente.getMedicamentos().toArray();
        return (MedicamentoDomiliciar) toArray[indice];
    }

    private Exercicio getExercicio(int indice) {
        Object[] toArray = paciente.getExercicios().toArray();
        return (Exercicio) toArray[indice];
    }
}
